#ifndef DIFF_TEST_CONTROLLER_HPP_
#define DIFF_TEST_CONTROLLER_HPP_

#include <chrono>
#include <cmath>
#include <memory>
#include <queue>
#include <string>
#include <vector>

#include "controller_interface/controller_interface.hpp"

#include "geometry_msgs/msg/twist.hpp"
#include "hardware_interface/handle.hpp"
#include "rclcpp/rclcpp.hpp"
#include "rclcpp_lifecycle/state.hpp"
#include "realtime_tools/realtime_box.h"
#include "realtime_tools/realtime_buffer.h"
#include "realtime_tools/realtime_publisher.h"
#include "nav_msgs/msg/odometry.hpp"
#include "tf2_msgs/msg/tf_message.hpp"

#include "odometry.hpp"
#include "visibility_control.h"
// auto-generated by generate_parameter_library
#include "diff_test_controller_parameters.hpp"

namespace diff_test_controller
{

class DiffTestController : public controller_interface::ControllerInterface
{
  using Twist = geometry_msgs::msg::Twist;

public:
  DIFF_TEST_CONTROLLER_PUBLIC
  DiffTestController();

  DIFF_TEST_CONTROLLER_PUBLIC
  controller_interface::InterfaceConfiguration command_interface_configuration() const override;

  DIFF_TEST_CONTROLLER_PUBLIC
  controller_interface::InterfaceConfiguration state_interface_configuration() const override;

  DIFF_TEST_CONTROLLER_PUBLIC
  controller_interface::return_type update(
    const rclcpp::Time & time,
    const rclcpp::Duration & period) override;

  DIFF_TEST_CONTROLLER_PUBLIC
  controller_interface::CallbackReturn on_init() override;

  DIFF_TEST_CONTROLLER_PUBLIC
  controller_interface::CallbackReturn on_configure(const rclcpp_lifecycle::State & previous_state)
  override;

  DIFF_TEST_CONTROLLER_PUBLIC
  controller_interface::CallbackReturn on_activate(const rclcpp_lifecycle::State & previous_state)
  override;

  DIFF_TEST_CONTROLLER_PUBLIC
  controller_interface::CallbackReturn on_deactivate(const rclcpp_lifecycle::State & previous_state)
  override;

  DIFF_TEST_CONTROLLER_PUBLIC
  controller_interface::CallbackReturn on_cleanup(const rclcpp_lifecycle::State & previous_state)
  override;

  DIFF_TEST_CONTROLLER_PUBLIC
  controller_interface::CallbackReturn on_error(const rclcpp_lifecycle::State & previous_state)
  override;

  DIFF_TEST_CONTROLLER_PUBLIC
  controller_interface::CallbackReturn on_shutdown(const rclcpp_lifecycle::State & previous_state)
  override;

protected:
  struct WheelHandle
  {
    std::reference_wrapper<const hardware_interface::LoanedStateInterface> feedback;
    std::reference_wrapper<hardware_interface::LoanedCommandInterface> velocity;
  };

  controller_interface::CallbackReturn configure_side(
    const std::string & wheel_kind,
    const std::vector<std::string> & wheel_names,
    std::vector<WheelHandle> & registered_handles);

  std::vector<WheelHandle> registered_left_wheel_handles_;
  std::vector<WheelHandle> registered_right_wheel_handles_;

  //里程计
  Odometry odometry_;
  //发布里程计数据
  std::shared_ptr<rclcpp::Publisher<nav_msgs::msg::Odometry>> odometry_publisher_ = nullptr;
  std::shared_ptr<realtime_tools::RealtimePublisher<nav_msgs::msg::Odometry>>
    realtime_odometry_publisher_ = nullptr;
  //发布坐标变化关系
  std::shared_ptr<rclcpp::Publisher<tf2_msgs::msg::TFMessage>> odometry_transform_publisher_ =
    nullptr;
  std::shared_ptr<realtime_tools::RealtimePublisher<tf2_msgs::msg::TFMessage>>
    realtime_odometry_transform_publisher_ = nullptr;

  // Parameters from ROS for diff_test_controller
  std::shared_ptr<diff_test_controller::ParamListener> param_listener_;
  diff_test_controller::Params params_;

  // received command
  bool subscriber_is_active_ = false;
  rclcpp::Subscription<geometry_msgs::msg::Twist>::SharedPtr velocity_command_subscriber_ = nullptr;
  realtime_tools::RealtimeBox<std::shared_ptr<geometry_msgs::msg::Twist>> received_velocity_msg_ptr_
  {nullptr};
  std::queue<geometry_msgs::msg::Twist> previous_commands_;  // last two commands

  // x speed, positive means forward,unit m/s. 速度 X方向 前为正
  // z rotation speed, positive means counterclockwise,unit
  // rad/s.Yaw旋转角速度，逆时针为正 单位 rad/s
  double linear_command;
  double angular_command;

  bool is_halted = false;
  bool reset();
  void halt();
};

}  // namespace diff_test_controller

#endif /* DIFF_TEST_CONTROLLER_HPP_ */
